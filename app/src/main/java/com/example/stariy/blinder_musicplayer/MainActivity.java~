package com.example.stariy.blinder_musicplayer;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import android.content.Intent;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.speech.tts.TextToSpeech;
import android.view.GestureDetector;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity implements GestureDetector.OnGestureListener {
    private MediaPlayer mediaPlayer = new MediaPlayer();
    TextToSpeech mSpeech;
    private ArrayList<String> audioList;// 存放音乐路径的动态数组
    private ArrayList<String> titlelist;//获取文件名称 123
    public static int currentAudioId;

    private int last = 0;
    File ff=new File(MUSIC_PATH+"blinder.txt");
    private static final String MUSIC_PATH=new String(Environment.getExternalStorageDirectory().toString()+"/");
    GestureDetector detector;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
       // setContentView(R.layout.activity_main);

        // 注册各个组件
        setContentView(R.layout.activity_main);
        detector = new GestureDetector(this, this);
        //实例化这个手势检测器对象
        mSpeech = new TextToSpeech(this, new TextToSpeech.OnInitListener() {
            @Override
            public void onInit(int status) {
                if (status == TextToSpeech.SUCCESS) {
                    mSpeech.speak("您好，欢迎使用盲人播放器，如需语音操作提示，请长按屏幕", TextToSpeech.QUEUE_FLUSH, null);
                }
            }

        });
        // 加载音乐资源
        ContentResolver contentResolver = getContentResolver();
        Cursor cursor = contentResolver.query(
                MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, null, null, null,
                MediaStore.Audio.Media.DEFAULT_SORT_ORDER);
        audioList = new ArrayList<String>();
        titlelist = new ArrayList<String>();
        for (cursor.moveToFirst(); !(cursor.isAfterLast()); cursor.moveToNext()) {
            String path = cursor.getString(cursor
                    .getColumnIndexOrThrow(MediaStore.Video.Media.DATA));
            audioList.add(path);
            String name = cursor.getString(cursor
                    .getColumnIndexOrThrow(MediaStore.Video.Media.TITLE));
            titlelist.add(name);
        }

        //Collections.sort(audioList);
//        Toast.makeText(MainActivity.this,
//                "音乐加载完成，共" + audioList.size() + "首音乐", Toast.LENGTH_SHORT)
//                .show();
        // 调节音量的功能
        final AudioManager audioManager = (AudioManager) MainActivity.this
                .getSystemService(Context.AUDIO_SERVICE);// 音乐管理器必须使用final类在OnCreate中定义
        MainActivity.this.setVolumeControlStream(AudioManager.STREAM_MUSIC);// 调节的是媒体音量
        // 设置音量条的最大值为系统媒体音量的最大值


        try {
            if (!ff.exists()) {
                //ff.createNewFile();
                FileWriter fw = new FileWriter(MUSIC_PATH + "blinder.txt");
                File f = new File(MUSIC_PATH + "blinder.txt");
                fw.write("0");
                FileOutputStream os = new FileOutputStream(f);
                DataOutputStream out = new DataOutputStream(os);
                out.writeShort(2);
                out.writeUTF("");
                fw.flush();
                fw.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        StringBuffer sb = new StringBuffer();
        try {
            FileInputStream fis = new FileInputStream(ff);
            int c;
            while ((c = fis.read()) != -1) {
                sb.append((char) c);
            }
            fis.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        String preindex = sb.toString().trim();
        currentAudioId = Integer.parseInt(preindex);


        Button b1=(Button)findViewById(R.id.buttonHelp);
        b1.setOnClickListener(new Button.OnClickListener()
        {
            public void onClick(View v)
            {
                Intent intent=new Intent();
                intent.setClass(MainActivity.this,Main2Activity.class);
                startActivity(intent);
                MainActivity.this.finish();

            }
        });



    }

    // 播放音乐
    public void playMusic(String path) {
        try {
            if (mediaPlayer.isPlaying()) {
                mediaPlayer.stop();
            }
            mediaPlayer.reset();
            mediaPlayer.setDataSource(path);
            mediaPlayer.prepare();
            TextView tv;
            tv=(TextView)findViewById(R.id.mytext);
            tv.setText(titlelist.get(currentAudioId));


            mediaPlayer.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public boolean onTouchEvent(MotionEvent e) {
        return detector.onTouchEvent(e);
    }

    //我们就onScroll方法来进行补充
    @Override
    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
        //showShortToast("The method has been called - onScroll");
        return false;/**/
    }

    public boolean onDown(MotionEvent e) {
        //showShortToast("The method has been called - onDown");
        return false;
    }

    public void onShowPress(MotionEvent e) {
        // showShortToast("The method has been called - onShowPress");
    }

    @Override
    public void onLongPress(MotionEvent e) {
//       // showShortToast("The method has been called - onLongPress");
//        if (mediaPlayer.isPlaying()) {
//            mSpeech.speak("播放器已停止", TextToSpeech.QUEUE_FLUSH, null);
//            mediaPlayer.stop();
//        }
        mSpeech.speak("左划屏幕播放 下一首歌曲，右划屏幕播放 上一首歌曲，点击屏幕暂停", TextToSpeech.QUEUE_FLUSH, null);
    }

    public boolean onSingleTapUp(MotionEvent e) {
        //showShortToast("The method has been called - onSingleTapUp");
        if (mediaPlayer.isPlaying()) {
            mSpeech.speak("暂停", TextToSpeech.QUEUE_FLUSH, null);
            mediaPlayer.pause();
        } else {
            mSpeech.speak("播放", TextToSpeech.QUEUE_FLUSH, null);
            if (last != 0)
                mediaPlayer.start();
            else {
                mSpeech.speak(titlelist.get(currentAudioId), TextToSpeech.QUEUE_FLUSH, null);
                playMusic(audioList.get(currentAudioId));
                last = last + 1;
            }
        }
        return false;
    }

    @Override
    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
        int verticalMinDistance = 20;
        int minVelocity = 0;
        if (e1.getX() - e2.getX() > verticalMinDistance && Math.abs(velocityX) > minVelocity) {
            currentAudioId++;
            if (currentAudioId > audioList.size() - 1) {
                currentAudioId = 0;
            }
            mSpeech.speak("下一首" + titlelist.get(currentAudioId), TextToSpeech.QUEUE_FLUSH, null);

            playMusic(audioList.get(currentAudioId));
        } else if (e2.getX() - e1.getX() > verticalMinDistance && Math.abs(velocityX) > minVelocity) {
            currentAudioId--;
            if (currentAudioId < 0) {
                currentAudioId = audioList.size() - 1;
            }
            mSpeech.speak("上一首" + titlelist.get(currentAudioId), TextToSpeech.QUEUE_FLUSH, null);

            playMusic(audioList.get(currentAudioId));
        }
        return false;
    }

    //我们将Toast封装一下，以便调用时只需要传入待显示的消息，而略去了填写Context和持续时间等参数。
    public void showShortToast(String message) {
        Toast.makeText(this.getApplicationContext(), message, Toast.LENGTH_SHORT).show();
    }

    // 创建menu的方法，没有该方法，不会在右上角设置菜单。
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // 设置menu界面为res\menu\menu.xml
        getMenuInflater().inflate(R.menu.menu, menu);
        return true;
    }

    // 处理菜单事件
    public boolean onOptionsItemSelected(MenuItem item) {
        // 得到当前选中的MenuItem的ID,
        int item_id = item.getItemId();
        switch (item_id) {
            // 设置id为menu_exit的菜单子项所要执行的方法。
            case R.id.menu_exit:
                System.exit(0);// 结束程序
                break;
        }
        return true;
    }

    protected void onDestroy() {
        String message=String.valueOf(currentAudioId);

        try {
            FileWriter fw = new FileWriter(MUSIC_PATH + "blinder.txt");
            File f = new File(MUSIC_PATH + "blinder.txt");
            fw.write(message);
            FileOutputStream os = new FileOutputStream(f);
            DataOutputStream out = new DataOutputStream(os);
            out.writeShort(2);
            out.writeUTF("");
            fw.flush();
            fw.close();
        } catch (Exception e) {
        }


        super.onDestroy();
        if (mSpeech != null) {
            mSpeech.stop();
            mSpeech.shutdown();
        }
        if (mediaPlayer.isPlaying()) {
            mediaPlayer.stop();
        }
        mediaPlayer.release();
    }
}



